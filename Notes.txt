[Nov 30]
It turned out that hostfxr doesn't work when injecting .netframework version framework, works only with CoreCLR supported versions: .netcore and .net.
Also when trying to inject dlls into the target process of .netframework version only .netcore can be injected, not .net, 
in this case a second VM is created, a newly created CoreCLR is added to the existing CLR.
It has been tested, it is incredibly difficult to interact with the CLR from CoreCLR.

[Dec 5]
UnsafeInjector was started to replace HostfxrInjector to create a single algorithm for injection for CLR and CoreCLR, because hostfxr was useless for .netframework.

[Dec 8]
When calling CLR methods from a newly created native thread, the thread must be initialised by calling SetupThread from vm\threads.h.

[Dec 9]
The movaps instruction requires address alignment to 256 bits (16 bytes). This caused problems when calling memset from shellcode, 
so need to write additional code in shellcode to align the stack before calling function.

[Dec 10]
In addition [Dec 8], it is also necessary to properly terminate the thread by calling ThreadStore::RemoveThread from vm\threads.h

[Dec 11 #0]
Have problems what CLR functions modify parts of the stack that should not be touched.
Therefore, code was added to shellcode to fix this problem so that the thread would terminated normally.

[Dec 11 #1]
For some reason, ExecuteMain internally runs into the problem that it cannot get EntryPoint of assembly because its PEAssembly structure is built incorrectly.
Also noticed cool method in AppDomain - ExecuteAssembly. Looks good since you don't have to think about how to specify the entrypoint in the injector. 
On the downside, for a dll to be injected, you need to select the "build in exe" option so that EntryPoint appears in the NetHeader of its dll.
The code will be rewritten to use ExecuteAssembly instead of LoadFromPath and ExecuteMainMethod.

[Dec 12]
It turned out that it is possible to load the library with an incorrectly initialized AssembyLoadContext, but it will be impossible to use it further.
For this reason, I will either have to initialize the AssembyLoadContext, which is extremely difficult, or take a ready-made one and hope that it will work.